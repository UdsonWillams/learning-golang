// SELECT

link legal: https://go.dev/tour/concurrency/5

O select é como o switch, só que para canais, e não é sequencial.
No caso de mais de 1 condição bater com o select, é retornado 
uma das condições que bateram mas aleatoria, não controlamos 
qual será retornada. 

ex.: 1

- Duas go funcs enviando X/2 numeros cada uma pra um canal
- For loop X valores, select case ←x
package main

import (
	"fmt"
)

func main() {

	a := make(chan int)
	b := make(chan int)
	x := 500

	go func(x int) {
		for i := 0; i < x; i++ {
			a <- i
		}
	}(x / 2)

	go func(x int) {
		for i := 0; i < x; i++ {
			b <- i // aqui o canal recebe um valor, logo um reecive
		}
	}(x / 2)
	
	for i := 0; i < x; i++ {
		select {
			case v := <-a:
				fmt.Println("Canal A:", v)			
			case v := <-b: // aqui o canal repassa esse valor, logo um send
				fmt.Println("Canal B:", v)
		}
	}
}


// NESSE Exemplo vamos tanto enviar como receber com o canal
// utilizando o select.
- Exemplo 2:
	- Func 1 recebe X valores de canal, depois manda qualquer coisa pra chan quit
	- Func 2 for infinito, select: case envia pra canal, case recebe de quit

package main

import (
	"fmt"
)

func main() {
	canal := make(chan int)
	quit := make(chan int)
	go recebeQuit(canal, quit)
	enviaPraCanal(canal, quit)
}

func recebeQuit (canal chan int, quit chan int) {
	for i := 0; i < 50; i++ {
		fmt.Println("Recebido:", <-canal)
	}
	quit <- 0
}

func enviaPraCanal (canal chan int, quit chan int) {
	qualquercoisa := 1
	for {
		select {
			case canal <- qualquercoisa:
				qualquercoisa++
			case <-quit:
				return
		}
	}
}

## EXISTE UM PROBLEMA NESSA FUNÇÃO QUE É SOLUCIONADO COM O COMMA OK
- Exemplo 3:
	- Chans par, ímpar, quit
	- Func send manda números pares pra um canal, ímpares pra outro, e fecha/quit
	- Func receive é um select entre os três canais, encerra no quit
	## EXISTE UM PROBLEMA NESSA FUNÇÃO QUE É SOLUCIONADO COM O COMMA OK
package main

import (
	"fmt"
)

//        - Chans par, ímpar, quit
//        - Func send manda números pares pra um canal, ímpares pra outro, e fecha/quit
//        - Func receive é um select entre os três canais, encerra no quit

func main() {

	par := make(chan int)
	ímpar := make(chan int)
	quit := make(chan bool)

	go mandaNúmeros(par, ímpar, quit)

	receive(par, ímpar, quit)
}

func mandaNúmeros(par, ímpar chan int, quit chan bool) {
	total := 100
	for i := 0; i < total; i++ {
		if i % 2 == 0 {
			par <- i
		} else {
			ímpar <- i
		}
	}
	close(par)
	close(ímpar)
	quit <- true
}

func receive(par, ímpar chan int, quit chan bool) {
	for {
		select {
		case v := <-par: // ver se recebeu e pega seu valor
			fmt.Println("O número", v, "é par.")
		case v := <-ímpar: // ver se recebeu e pega seu valor
			fmt.Println("O número", v, "é ímpar.")
		case <-quit: // não pega o valor, só quer saber se recebeu
			return
		}
	}
}
