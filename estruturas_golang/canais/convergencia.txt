Um padrão de programação que envolve a gente pegar dados de 
varios pontos diferentes e convergir eles em menos pontos 
ou um ponto só.

A prof mostra 2 exemplos mais praticos 
No exemplo do todd fazemos a convergencia
de 2 canais, os transformando em 1 canal só 
contendo os valores dos outros 2.


ex .1
Ex do Todd 

package main

import (
	"fmt"
	"sync"
)

func main() {
	par := make(chan int)
	ímpar := make(chan int)
	converge := make(chan int)

	go envia(par, ímpar) // popula par e impar 
	go recebe(par, ímpar, converge) // converge par e impar em converge

	for v := range converge {
		fmt.Println("Valor recebido:", v)
	}

}

func envia(p, i chan int) {
	x := 100
	for n := 0; n < x; n++ {
		if n%2 == 0 {
			p <- n
		} else {
			i <- n
		}
	}
	close(p)
	close(i)
}

// Essa função recebe 3 canais.
// Ela converge os 2 primeiros em 1 canal só.
// Agora o Terceiro possui o valor dos 2 canais.
func recebe(p, i, c chan int) {
	var wg sync.WaitGroup
	wg.Add(1)
	go func() {
		for v := range p {
			c <- v
		}
		wg.Done()
	}()
	wg.Add(1)
	go func() {
		for v := range i {
			c <- v
		}
		wg.Done()
	}()
	wg.Wait()
	close(c)
}

// - Func receive cria duas go funcs, cada uma com um for range, enviando dados dos canais par e ímpar pro canal converge. Não esquecer de WGs!
// - Por fim um range retira todas as informações do canal converge.

ex 02.:
Ex do Rob Pike
Rob Pike (Go Concurrency Patterns): https://www.youtube.com/watch?v=f6kdp27TYZs


package main

import (
	"fmt"
	"math/rand"
	"time"
)

func main() {
	canal := converge(trabalho("maçã"), trabalho("pêra"))
	for x := 0; x < 16; x++ {
		fmt.Println(<-canal)
	}

}

func trabalho(s string) chan string {
	canal := make(chan string)
	go func(s string, c chan string) {
		for i := 1; ; i++ {
			c <- fmt.Sprintf("Função %v diz: %v", s, i)
			time.Sleep(time.Millisecond * time.Duration(rand.Intn(1e3)))
		}
	}(s, canal)
	return canal
}

func converge(x, y chan string) chan string {
	novo := make(chan string)
	go func() {
		for {
			novo <- <-x
		}
	}()
	go func() {
		for {
			novo <- <-y
		}
	}()
	return novo
}
