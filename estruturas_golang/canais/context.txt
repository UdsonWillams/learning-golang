Se a gente lança 500 goroutines pra fazer uma tarefa,
e cancelamos a tarefa no meio do caminho, como fazemos pra matar as goroutines?

Podemos organizar esse exemplo utilizando os contexts.

- Documentação: https://golang.org/pkg/context/
- Aos aventureiros: https://blog.golang.org/context

Destaques dessa estrutura:
context.Background
context.WithCancel
goroutines: select case <-ctx.Done(): return; default: continua trabalhando
ctx.Err();
Temos também WithDeadline/Timeout

Tudo isso são funções/metodos.

context.Background = Base do context, se quisermos usar 
o context com qualquer coisa precisamos de um Background.

context.WithCancel = manda um sinal de cancelamento para
as go routines. recebe um background, e retorna um 
ctx e um cancel.

WithDeadline = Temporizador  com hora exata para a go routine
executar, Por ex.: essa go routine tem até as 2 horas para executar essa tarefa.

Timeout = Temporizador também, porem vocÊ dá um tempo para ele executar,
ex.: essa go routine tem 1minuto para executar.

- Exemplos usados pelo Todd:
    - Analisando:
        - Background: https://play.golang.org/p/cByXyrxXUf 
        - WithCancel: https://play.golang.org/p/XOknf0aSpx
        - Função Cancel: https://play.golang.org/p/UzQxxhn_fm 
    - Exemplos práticos:
        - func WithCancel: https://play.golang.org/p/Lmbyn7bO7e
        - func WithCancel: https://play.golang.org/p/wvGmvMzIMW 
        - func WithDeadline: https://play.golang.org/p/Q6mVdQqYTt 
        - func WithTimeout: https://play.golang.org/p/OuES9sP_yX 
        - func WithValue: https://play.golang.org/p/8JDCGk1K4P

